""" 07.6.1 break, continue и else"""
# Оператор прерывания цикла break
#  Иногда бывает нужно прервать выполнение цикла преждевременно

# Напишем программу, определяющую, что число является простым:
num = int(input())
flag = True
# Как только мы встречаем делитель отличный от 1 и num, мы меняем значение сигнальной метки и прерываем цикл,
# поскольку дальнейшее его выполнение лишено смысла: число гарантированно не является простым.
for i in range(2, num):
    if num % i == 0:    # если исходное число делится на какое-либо отличное от 1 и самого себя
        flag = False
        break           # останавливаем цикл если встретили делитель числа

if flag:
    print('Число простое')
else:
    print('Число составное')


#  Напишем программу, использующую цикл for, которая считывает 10 чисел и суммирует их до тех пор,
#  пока не обнаружит отрицательное число. В этом случае выполнение цикла прерывается командой break:
result = 0
for i in range(10):
    num = int(input())
    if num < 0:
        break
    result += num
print(result)


#  Напишем, программу, которая определяет, содержит ли введенное пользователем число, цифру 7.
num = int(input())
number = num
flag = False
while num != 0:
    last_digit = num % 10
    if last_digit == 7:
        flag = True
        break        # прерываем цикл, так как число гарантированно содержит цифру 7
    num //= 10

if flag:  # if flag == True
    print(f'Число: {number} содержит цифру 7')
else:
    print(f'Число: {number} не содержит цифру 7')


''' Бесконечные циклы '''
# Иногда с помощью бесконечного цикла удается сделать программный код более читабельным.
# Более простым может быть завершение цикла на основе условий внутри тела цикла,
# а не на основе условий в его заголовке:
# while True:
#     if условие 1:  # условие для остановки цикла
#          break
#     if условие 2:  # еще одно условие для остановки цикла
#         break
#     if условие 3:  # еще одно условие для остановки цикла
#         break

''' Оператор continue '''
#  Другая стандартная идиома циклов — пропуск отдельных элементов при переборе.
#  Оператор continue позволяет перейти к следующей итерации цикла for или while
#  до завершения всех команд в теле цикла.

# Напишем программу, которая выводит все числа от 1 до 100, кроме чисел 7, 17, 29 и 78.
for i in range(1, 101):
    # if i == 7 or i == 17 or i == 29 or i == 78:
    if i in (7, 17, 29, 78):
        continue  # переходим на следующую итерацию
    print(i)

# Задача 07:
#  На вход программе подается число n > 1.
#  Напишите программу, которая выводит его наименьший отличный от 1 делитель.
n = int(input())
for i in range(2, n + 1):
    if n % i == 0:
        print(i)
        break

# Задача 08:
# На вход программе подается натуральное число n.
# Напишите программу, которая выводит числа от 1 до n включительно за исключением:
#
# чисел от 5 до 9 включительно;
# чисел от 17 до 37 включительно;
# чисел от 78 до 87 включительно.
n = int(input())
for i in range(1, n + 1):
    if 5 <= i <= 9 or 17 <= i <= 37 or 78 <= i <= 87:
        continue
    print(i)

''' Блок else в циклах '''
# Python допускает необязательный блок else в конце циклов while и for.
# Это уникальная особенность Python, не встречающаяся в большинстве других языков программирования.
# Синтаксис такой конструкции следующий:

# while условие:
#     блок кода1
# else:
#     блок кода2
''' или '''
# for i in range(10):
#     блок кода1
# else:
#     блок кода2

#  Блок кода2, указанный в else, будет выполнен, когда штатным образом завершается цикл while или for.

#  Рассмотрим следующий программный код:
n = 3
while n > 0:
    n -= 1
    print(n)
else:
    print('Цикл завершен.')
# результат:
# 2
# 1
# 0
# Цикл завершен.

#  Рассмотрим другой программный код:
n = 5
while n > 0:
    n -= 1
    print(n)
    if n == 2:
        break
else:
    print('Цикл завершен.')
# результат:
# 4
# 3
# 2


# Изменим, программу, которая определяет, содержит ли введенное пользователем число, цифру 7 (см. выше)
num = int(input())
n = num
while n != 0:
    last = n % 10
    if last == 7:
        print(f'Число: {number} содержит цифру 7')
        break
    n //= 10
else:
    print(f'Число: {number} не содержит цифру 7')
