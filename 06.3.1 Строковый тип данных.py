# 06.3.1 Строковый тип данных

# строковый тип данных имеет название str
# Чтобы посчитать длину строки используем встроенную функцию len()
# При подсчете длины строки считаются все символы, включая пробелы
s1 = 'abc de'
length1 = len(s1)  # 6
# Для преобразования строки к числу мы использовали функции int() и float().
# Для обратного преобразования, то есть из числа в строку мы используем функцию str()
num1 = 1777    # целое число
num2 = 17.77   # число с плавающей точкой
s1 = str(num1)  # преобразовали целое число в строку '1777'
s2 = str(num2)  # преобразовали число с плавающей точкой в строку '17.77'
#
# Конкатенация строк
# Строки, как и числа, можно складывать.
# Операция сложения строк называется конкатенацией или сцеплением
s1 = 'ab' + 'bc'  # abbc
s2 = s1 + '!!'  # abbc!!
# Следующие две строки кода делают одно и тоже:
print('a', 'b', 'c', sep='*', end='!')  # a*b*c!
print('a' + '*' + 'b' + '*' + 'c' + '!')  # a*b*c!
#
# Умножение строки на число
s = 'Hi' * 4  # HiHiHiHi
print('-' * 10)  # ----------
# Строку можно умножать на число, но нельзя умножать на строку!
# Примечание 1. Тройные кавычки в Python используются для многострочного (multiline) текста.
# Например:
text = '''Python is an interpreted, high-level, general-purpose programming language.
Created by Guido van Rossum and first released in 1991, Python design 
philosophy emphasizes code readability with its notable use of significant whitespace.'''
print(text)
# Экранирование символов
text = 'I don\'t "see"'  # I don't "see"
#
# Задача 04:
# Даны названия трех городов. Напишите программу, которая определяет самое короткое и самое длинное название города.
# Примечание. Гарантируется, что длины названий всех трех городов различны.
#
# input: На вход программе подаётся названия трех городов, каждое на отдельной строке.
# output: Программа должна вывести самое короткое и длинное название города, каждое на отдельной строке.

a, b, c = (input('')), (input('')), (input(''))
city = {len(a): a, len(b): b, len(c): c}
keys_min = min(len(a), len(b), len(c))
keys_max = max(len(a), len(b), len(c))
city_min = city.get(keys_min)
city_max = city.get(keys_max)
print(city_min, city_max, sep='\n')

# Другое решение
a, b, c = (input('')), (input('')), (input(''))
sp = [a, b, c]
sp = sorted(sp, key=len)
print(sp[0], sp[2], sep='\n')

# Другое решение
a, b, c = (input('')), (input('')), (input(''))
if len(a) < len(b):
    b, a = a, b
if len(c) > len(b):
    c, b = b, c
if len(c) > len(a):
    c, a = a, c
print(c, a, sep='\n')

# Задача 05:
# Арифметические строки
# Вводятся 3 строки в случайном порядке. Напишите программу, которая выясняет можно ли из длин этих строк
# построить возрастающую арифметическую прогрессию.
#
# input: На вход программе подаются три строки, каждая на отдельной строке.
# output: Программа должна вывести строку «YES», если из длин введенных слов можно
# построить арифметическую прогрессию, «NO» в ином случае.
a, b, c = (input('')), (input('')), (input(''))
str_in = [a, b, c]
str_in = sorted(str_in, key=len)
if (len(str_in[2]) - len(str_in[1])) == (len(str_in[1]) - len(str_in[0])):
    print('YES')
else:
    print('NO')

