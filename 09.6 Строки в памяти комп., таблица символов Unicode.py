# 9.6 Строки в памяти компьютера, таблица символов Unicode

"""
Функция ord
позволяет определить код некоторого символа в таблице символов Unicode.
Аргументом данной функции является одиночный символ.

num1 = ord('A')  # 65
num2 = ord('B')  # 66
num3 = ord('a')  # 97


Функция chr
позволяет определить по коду символа сам символ. Аргументом данной функции является численный код.

chr1 = chr(65)  # A
chr2 = chr(75)  # K
chr3 = chr(110)  # n

"""

# Функции ord и chr часто работают в паре. Код для вывода всех заглавных букв английского алфавита:
for el in range(26):
    print(chr(ord('A') + el), end='')

# Функции ord и chr являются взаимнообратными. Для них выполнены равенства:
#  chr(ord('A')) == 'A'
#  ord(chr(65)) == 65


# На вход программе подаются два числа num_1 и num_2.
# Напишите программу, которая для каждого кодового значения в диапазоне от num_1 до num_2 (включительно),
# выводит соответствующий ему символ из таблицы символов Unicode.
num_1, num_2 = int(input()), int(input())
for el in range(num_1, num_2 + 1):
    print(chr(el), end=' ')


# На вход программе подается строка текста.
# Напишите программу, которая переводит каждый ее символ в соответствующий ему код из таблицы символов Unicode.
s = input()
for el in s:
    print(ord(el), end=' ')


# В первой строке дается число n (1 <= n <= 25) – сдвиг,
# во второй строке даётся закодированное сообщение в виде строки со строчными латинскими буквами.
# Программа должна вывести одну строку – декодированное сообщение
# Главное в логике программы: результат ord(el) должен быть в диапазоне 97 - 122 (номера в ASCII table)
# Примечание: в английском алфавите 26 букв
num, s = int(input()), input()
for el in s:
    n = ord(el) - num
    if n < 97:
        n = 122 - (96 - n)
    print(chr(n), end='')


# Другие варианты
num, s = int(input()), input()
res = ''
alphabet = 'abcdefghijklmnopqrstuvwxyz'
for el in range(len(s)):
    res += alphabet[alphabet.find(s[el]) - num]
print(res)
